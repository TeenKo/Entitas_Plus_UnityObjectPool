//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public _Core_.ObjectPool.Components.TotalPoolSizeComponent totalPoolSize { get { return (_Core_.ObjectPool.Components.TotalPoolSizeComponent)GetComponent(GameComponentsLookup.TotalPoolSize); } }
    public bool hasTotalPoolSize { get { return HasComponent(GameComponentsLookup.TotalPoolSize); } }

    public void AddTotalPoolSize(int newValue) {
        var index = GameComponentsLookup.TotalPoolSize;
        var component = (_Core_.ObjectPool.Components.TotalPoolSizeComponent)CreateComponent(index, typeof(_Core_.ObjectPool.Components.TotalPoolSizeComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceTotalPoolSize(int newValue) {
        var index = GameComponentsLookup.TotalPoolSize;
        var component = (_Core_.ObjectPool.Components.TotalPoolSizeComponent)CreateComponent(index, typeof(_Core_.ObjectPool.Components.TotalPoolSizeComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveTotalPoolSize() {
        RemoveComponent(GameComponentsLookup.TotalPoolSize);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherTotalPoolSize;

    public static Entitas.IMatcher<GameEntity> TotalPoolSize {
        get {
            if (_matcherTotalPoolSize == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.TotalPoolSize);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherTotalPoolSize = matcher;
            }

            return _matcherTotalPoolSize;
        }
    }
}
